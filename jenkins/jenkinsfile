pipeline {
    agent any

    environment {
        NODE_ENV = 'development'
        DOCKER_IMAGE = 'christian_portfolio_img'
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }
        stage('Debug Workspace') {
            steps {
                sh 'echo "üïµÔ∏è Checking if scripts directory exists:"'
                sh 'ls -la'
                sh 'ls -la scripts || echo "‚ùó scripts folder NOT FOUND!"'
            }
        }
        stage('Clean Workspace') {
            steps {
                echo "üßπ Force cleaning workspace..."
                sh 'rm -rf node_modules || true'
            }
        }

        stage('Build App') {
            steps {
                echo "üèó Building React app..."
                sh 'chmod +x scripts/buildmyportfolio.sh'
                sh './scripts/buildmyportfolio.sh'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Verify Image') {
            steps {
                echo "üîç Verifying image was built..."
                sh 'docker images | grep $DOCKER_IMAGE'
            }
        }
          stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl config current-context'
                sh 'kubectl get pods'
                sh 'kubectl apply -f k8s/deployment.yml --validate=false'
            }
        }

        stage('Ansible Post Deploy Config') {
            steps {
                sh 'ansible-playbook ansible/deploy.yml'
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            sh 'sudo chown -R jenkins:jenkins . || true'
            sh 'chmod -R +w node_modules || true'
            deleteDir()
        }
        success {
            echo '‚úÖ Build pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Build pipeline failed.'
        }
    }
}


// pipeline {
//     agent any
//     environment {
//         KUBECONFIG = '/root/.kube/config'
//         NODE_ENV = 'development'
//     }

//     stages {
//         stage('Checkout') {
//             steps {
//                 deleteDir()
//                 checkout scm
//             }
//         }
//          stage('Debug Workspace') {
//             steps {
//                 sh 'echo "üïµÔ∏è Checking if scripts directory exists:"'
//                 sh 'ls -la'
//                 sh 'ls -la scripts || echo "‚ùó scripts folder NOT FOUND!"'
//             }
//         }
//         stage('Clean Workspace') {
//             steps {
//                 echo "üßπ Force cleaning workspace..."
//                 sh 'rm -rf node_modules || true'
//             }
//         }
//         stage('Build and Deploy') {
//             steps {
//                 script {
//                     echo '‚úÖ Loading environment variables...'
//                     def envFile = readFile('.env')
//                     def lines = envFile.split('\n')
//                     for (line in lines) {
//                         if (line?.trim() && !line.startsWith('#')) {
//                             def parts = line.trim().split('=')
//                             if (parts.size() == 2) {
//                                 def key = parts[0]
//                                 def value = parts[1]
//                                 echo "Loaded env: ${key}=${value}" // For debug only
//                                 // Note: Cannot assign to env[key] unless approved!
//                             }
//                         }
//                     }
                   
//                     echo 'üöÄ Building portfolio app...'
//                     sh 'chmod +x scripts/buildmyportfolio.sh'
//                     sh './scripts/buildmyportfolio.sh'
//                 }
//             }
//         }

//         stage('Deploy to Kubernetes') {
//             steps {
//                 sh 'kubectl config current-context'
//                 sh 'kubectl get pods'
//                 sh 'kubectl apply -f k8s/deployment.yml --validate=false'
//             }
//         }

//         stage('Ansible Post Deploy Config') {
//             steps {
//                 sh 'ansible-playbook ansible/deploy.yml'
//             }
//         }
//     }
// stage('Optional Push to Registry') {
        //     when {
        //         expression { return env.PUSH_TO_REGISTRY == 'true' }
        //     }
        //     steps {
        //         withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
        //             sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
        //             sh 'docker tag $DOCKER_IMAGE $DOCKER_USER/$DOCKER_IMAGE:latest'
        //             sh 'docker push $DOCKER_USER/$DOCKER_IMAGE:latest'
        //         }
        //     }
        // }

//     post {
//         always {
//             echo 'üßπ Cleaning up workspace...'
//             sh 'sudo chown -R jenkins:jenkins . || true'
//             sh 'chmod -R +w node_modules || true'
//             deleteDir()
//         }
//         failure {
//         echo '‚ùå Build failed!'
//         }
//         success {
//             echo '‚úÖ Build succeeded!'
//         }   
//     }
// }






