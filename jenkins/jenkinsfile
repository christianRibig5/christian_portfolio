pipeline {
    agent {
        docker {
            image 'my-jenkins-devops:latest'
            args '-u root --entrypoint=""' // removes `cat` entrypoint default
            reuseNode true
        }
    }

    environment {
        KUBECONFIG = '/root/.kube/config'
        NODE_ENV = 'production'
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }
         stage('Debug Workspace') {
            steps {
                sh 'echo "üïµÔ∏è Checking if scripts directory exists:"'
                sh 'ls -la'
                sh 'ls -la scripts || echo "‚ùó scripts folder NOT FOUND!"'
            }
        }
        stage('Build and Deploy') {
            steps {
                script {
                    echo '‚úÖ Loading environment variables...'
                    def envFile = readFile('.env')
                    def lines = envFile.split('\n')
                    for (line in lines) {
                        if (line?.trim() && !line.startsWith('#')) {
                            def parts = line.trim().split('=')
                            if (parts.size() == 2) {
                                def key = parts[0]
                                def value = parts[1]
                                echo "Loaded env: ${key}=${value}" // For debug only
                                // Note: Cannot assign to env[key] unless approved!
                            }
                        }
                    }
                   
                    echo 'üöÄ Building portfolio app...'
                    sh 'chmod +x scripts/buildmyportfolio.sh'
                    sh './scripts/buildmyportfolio.sh'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl config current-context'
                sh 'kubectl get pods'
                sh 'kubectl apply -f k8s/deployment.yml --validate=false'
            }
        }

        stage('Ansible Post Deploy Config') {
            steps {
                sh 'ansible-playbook ansible/deploy.yml'
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            sh 'chmod -R +w node_modules || true'
            deleteDir()
        }
        failure {
        echo '‚ùå Build failed!'
        }
        success {
            echo '‚úÖ Build succeeded!'
        }   
    }
}



