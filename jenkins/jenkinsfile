pipeline {
    agent any

     environment {
        KUBECONFIG = '/root/.kube/config'
        NODE_ENV = 'development'
        DOCKER_IMAGE='christian_portfolio_img'
     }
    stages {
        stage('Checkout') {
                steps {
                echo "üì• Cloning code manually..."
                sh 'git clone https://github.com/christianRibig5/christian_portfolio.git .'
            }
        }
        stage('Debug Workspace') {
            steps {
                sh 'echo "üïµÔ∏è Checking if scripts directory exists:"'
                sh 'ls -la'
                sh 'ls -la scripts || echo "‚ùó scripts folder NOT FOUND!"'
            }
        }
        stage('Clean Workspace') {
            steps {
                echo "üßπ Force cleaning workspace..."
                sh 'rm -rf node_modules || true'
            }
        }

        stage('Build App') {
            steps {
                echo "üèó Building React app..."
                sh 'chmod +x scripts/buildmyportfolio.sh'
                sh './scripts/buildmyportfolio.sh'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Verify Image') {
            steps {
                echo "üîç Verifying image was built..."
                sh 'docker images | grep $DOCKER_IMAGE'
            }
        }
          stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl config current-context'
                sh 'kubectl get pods'
                sh 'kubectl apply -f k8s/deployment.yml --validate=false'
            }
        }

        stage('Ansible Post Deploy Config') {
            steps {
                sh 'ansible-playbook ansible/deploy.yml'
            }
        }
    }
    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            sh 'sudo chown -R jenkins:jenkins . || true'
            sh 'chmod -R +w node_modules || true'
            deleteDir()
        }
        success {
            echo '‚úÖ Build pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Build pipeline failed.'
        }
    }
}






