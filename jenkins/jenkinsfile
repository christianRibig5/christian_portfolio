// pipeline {
//     agent any

//     stages {
//         stage('Checkout') {
//             steps {
//                 // Clean up and immediately checkout the repo
//                 deleteDir()
//                 checkout scm
//             }
//         }

//         stage('Load Environment Variables') {
//             steps {
//                 script {
//                     def envFile = readFile('.env')
//                     def lines = envFile.split('\n')
//                     for (line in lines) {
//                         if (line.trim() && !line.startsWith('#')) {
//                             def (key, value) = line.split('=')
//                             env."${key}" = value
//                         }
//                     }
//                 }
//             }
//         }

//         stage('Build') {
//             steps {
//                 script {
//                     sh 'docker version || echo "❌ Docker is not accessible"'
//                     sh 'chmod +x scripts/buildmyportfolio.sh'
//                     sh './scripts/buildmyportfolio.sh'
//                 }
//             }
//         }

//         stage('Deploy to Kubernetes') {
//             steps {
//                 sh 'kubectl apply -f k8s/deployment.yml --validate=false'
//             }
//         }

//         stage('Ansible Post Deploy Config') {
//             steps {
//                 sh 'ansible-playbook ansible/deploy.yml'
//             }
//         }
//     }
// }

pipeline {
    agent {
        docker {
            image 'my-jenkins-devops' // your custom Jenkins image
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_IMAGE_NAME = 'christian_portfolio_img'
        DOCKER_CONTAINER_NAME = 'christian_portfolio_container'
        REACT_APP_PORT = '3000'
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }

        stage('Load Environment Variables') {
            steps {
                script {
                    def envFile = readFile('.env')
                    def lines = envFile.split('\n')
                    for (line in lines) {
                        if (line.trim() && !line.startsWith('#')) {
                            def (key, value) = line.split('=')
                            env."${key}" = value
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'chmod +x scripts/buildmyportfolio.sh'
                    sh './scripts/buildmyportfolio.sh'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl version --client || echo "❌ kubectl not available"'
                sh 'kubectl apply -f k8s/deployment.yml --validate=false'
            }
        }

        stage('Ansible Post Deploy Config') {
            steps {
                sh 'ansible-playbook ansible/deploy.yml'
            }
        }
    }
}
